# Docker Compose version is now inferred automatically
#
# Base URL Configuration:
# The application uses APP_BASE_URL environment variable for consistent URL handling
# across local, CI, and Docker networks. This prevents IPv6/IPv4 connection issues.
#
# Examples:
# - Local development: APP_BASE_URL=http://127.0.0.1:8000
# - Docker service: APP_BASE_URL=http://api-gateway:8000
# - CI environment: APP_BASE_URL=http://localhost:8000
#
# For inter-service communication within Docker Compose, use service names:
# - APP_BASE_URL=http://api-gateway:8000 (for external access)
# - APP_BASE_URL=http://customer-service:8000 (for customer service)
# - APP_BASE_URL=http://vehicle-service:8000 (for vehicle service)
# etc.

services:
  # Database
  postgres:
    image: postgres:16
    container_name: automotive_postgres
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_net

  # Redis
  redis:
    image: redis:7-alpine
    container_name: automotive_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_net



  # Customer Service
  customer-service:
    build:
      context: .
      dockerfile: services/customer-service/Dockerfile
    container_name: automotive_customer_service
    environment:
      SERVICE_NAME: customer-service
      SERVICE_VERSION: 1.0.0
      DEBUG: "true"
      LOG_LEVEL: INFO
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
      DB_SCHEMA: customers
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8002:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal_net

  # Vehicle Service
  vehicle-service:
    build:
      context: .
      dockerfile: services/vehicle-service/Dockerfile
    container_name: automotive_vehicle_service
    environment:
      SERVICE_NAME: vehicle-service
      SERVICE_VERSION: 1.0.0
      DEBUG: "true"
      LOG_LEVEL: INFO
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
      DB_SCHEMA: vehicles
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8003:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal_net

  # Appointment Service
  appointment-service:
    build:
      context: .
      dockerfile: services/appointment-service/Dockerfile
    container_name: automotive_appointment_service
    environment:
      SERVICE_NAME: appointment-service
      SERVICE_VERSION: 1.0.0
      DEBUG: "true"
      LOG_LEVEL: INFO
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
      DB_SCHEMA: appointments
      REDIS_URL: redis://redis:6379/0
      CUSTOMER_SERVICE_URL: http://customer-service:8000
      VEHICLE_SERVICE_URL: http://vehicle-service:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8004:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal_net

  # Workshop Service
  workshop-service:
    build:
      context: .
      dockerfile: services/workshop-service/Dockerfile
    container_name: automotive_workshop_service
    environment:
      SERVICE_NAME: workshop-service
      SERVICE_VERSION: 1.0.0
      DEBUG: "true"
      LOG_LEVEL: INFO
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
      DB_SCHEMA: workshop
      REDIS_URL: redis://redis:6379/0
      CUSTOMER_SERVICE_URL: http://customer-service:8000
      VEHICLE_SERVICE_URL: http://vehicle-service:8000
      APPOINTMENT_SERVICE_URL: http://appointment-service:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8005:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal_net

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: services/inventory-service/Dockerfile
    container_name: automotive_inventory_service
    environment:
      SERVICE_NAME: inventory-service
      SERVICE_VERSION: 1.0.0
      DEBUG: "true"
      LOG_LEVEL: INFO
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
      DB_SCHEMA: inventory
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8006:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal_net

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
    container_name: automotive_notification_service
    environment:
      SERVICE_NAME: notification-service
      SERVICE_VERSION: 1.0.0
      DEBUG: "true"
      LOG_LEVEL: INFO
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
      DB_SCHEMA: notifications
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8007:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal_net

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: automotive_api_gateway
    environment:
      SERVICE_NAME: api-gateway
      SERVICE_VERSION: 1.0.0
      DEBUG: "true"
      LOG_LEVEL: INFO
      REDIS_URL: redis://redis:6379/0
      CUSTOMER_SERVICE_URL: http://customer-service:8000
      VEHICLE_SERVICE_URL: http://vehicle-service:8000
      APPOINTMENT_SERVICE_URL: http://appointment-service:8000
      WORKSHOP_SERVICE_URL: http://workshop-service:8000
      INVENTORY_SERVICE_URL: http://inventory-service:8000
      NOTIFICATION_SERVICE_URL: http://notification-service:8000
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8080:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal_net
      - public_net

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: automotive_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@automotive.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - internal_net

volumes:
  postgres_data:

networks:
  internal_net:
    driver: bridge
  public_net:
    driver: bridge
